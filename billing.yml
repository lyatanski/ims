services:
  ocs:
    image: ghcr.io/lyatanski/cgrates
    configs:
    - source: cgrates.json
      target: /etc/cgrates/cgrates.json
    expose:
    - 3868/tcp
    depends_on:
      ocs-redis:
        condition: service_started

  preload:
    command: -config_path /etc/cgrates/ -path /var/cgrates/ -flush_stordb
    configs:
    - source: cgrates.json
      target: /etc/cgrates/cgrates.json
    - source: Chargers.csv
      target: /var/cgrates/Chargers
    - source: Filters.csv
      target: /var/cgrates/Filters.csv
    - source: RatingProfiles.csv
      target: /var/cgrates/RatingProfiles.csv
    - source: RatingPlans.csv
      target: /var/cgrates/RatingPlans.csv
    - source: DestinationRates.csv
      target: /var/cgrates/DestinationRates.csv
    - source: Destinations.csv
      target: /var/cgrates/Destinations.csv
    - source: Rates.csv
      target: /var/cgrates/Rates.csv
    network_mode: service:ocs
    build:
      context: .
      dockerfile_inline: |
        FROM golang:alpine AS build
        RUN apk add jq binutils
        RUN go install github.com/cgrates/cgrates/cmd/cgr-loader@master
        RUN strip bin/*

        FROM scratch
        COPY --from=build /go/bin/cgr-loader /sbin/cgr-loader
        ENTRYPOINT ["cgr-loader", "-verbose"]

  trace:
    profiles:
    - debug
    network_mode: service:ocs
    command: -d any port 2012 or port 2014
    build:
      context: .
      dockerfile_inline: |
        FROM alpine
        RUN apk add ngrep
        ENTRYPOINT ["ngrep"]

  ocs-redis:
    image: valkey/valkey:8.1-alpine
    expose:
    - 6379/tcp


configs:
  cgrates.json:
    content: |
      {
          "general": {
              "log_level": 7,
          },
          "data_db": {
              "db_host": "ocs-redis",
          },
          "stor_db": {
              "db_type": "*internal",
          },
          "listen": {
              "rpc_json": ":2012",
              "rpc_gob": "",    // turn off 2013
              "http": ":2080",
          },
          "rals": {
              "enabled": true,
              "thresholds_conns": ["*localhost"],
              "sessions_conns": ["*localhost"],
          },
          "schedulers": {
              "enabled": true,
          },
          "chargers": {
              "enabled": true,
          },
          "filters": {
              "stats_conns": [],
              "resources_conns": [],
          },
          "sessions": {
              "enabled": true,
              //"listen_bijson": "",    // turn off 2014
              "chargers_conns": ["*localhost"],
              "rals_conns": ["*localhost"],
          },
          "thresholds": {
              "enabled": true,
              "store_interval": "-1"
          },
          "apiers": {
              "enabled": true,
              "caches_conns":["*localhost"],
          },
          "diameter_agent": {
              "enabled": true,
              "sessions_conns": ["*localhost"],
              "listen": ":3868",
              "listen_net": "tcp",
              "origin_host": "ocs.${REALM}",
              "origin_realm": "${REALM}",
              "request_processors": [
                  {
                      "id": "VoiceInit",
                      "filters": [
                          "*string:~*vars.*cmd:CCR",
                          "*string:~*req.CC-Request-Type:1",
                      ],
                      "flags": [
                          "*initiate",
                          "*accounts",
                          //"*continue"
                      ],
                      "request_fields": [
                          {
                              "tag": "ToR",
                              "path": "*cgreq.ToR",
                              "type": "*constant",
                              "value": "*voice"
                          },
                          {
                              "tag": "OriginID",
                              "path": "*cgreq.OriginID",
                              "type": "*variable",
                              "value": "~*req.Session-Id",
                              "mandatory": true
                          },
                          {
                              "tag": "RequestType",
                              "path": "*cgreq.RequestType",
                              "type": "*constant",
                              "value": "*prepaid"
                          },
                          {
                              "tag": "Category",
                              "path": "*cgreq.Category",
                              "type": "*constant",
                              "value": "call"
                          },
                          //{
                          //    "tag": "Account",
                          //    "path": "*cgreq.Account",
                          //    "type": "*constant",
                          //    "value": "~*req.Service-Information.Subscription-Id.Subscription-Id-Data",
                          //},
                          {
                              "tag": "Destination",
                              "path": "*cgreq.Destination",
                              "type": "*variable",
                              "value": "~*req.Service-Information.IMS-Information.Called-Party-Address",
                              "mandatory": true
                          },
                          {
                              "tag": "AnswerTime",
                              "path": "*cgreq.AnswerTime",
                              "type": "*variable",
                              "value": "~*req.Event-Timestamp",
                              "mandatory": true
                          },
                          {
                              "tag": "Usage",
                              "path": "*cgreq.Usage",
                              "type": "*variable",
                              "value": "~*req.Multiple-Services-Credit-Control.Requested-Service-Unit.CC-Time",
                              "mandatory": true
                          },
                          {
                              "tag": "SubscriberID",
                              "path": "*cgreq.SubscriberId",
                              "type": "*variable",
                              "value": "~*req.Subscription-Id.Subscription-Id-Data",
                              "mandatory": true
                          }
                      ],
                      "reply_fields": [
                          { "tag": "CCATemplate", "type": "*template", "value": "*cca" },
                          {
                              "tag": "GrantedUnits",
                              "path": "*rep.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Time",
                              "type": "*constant",
                              "value": "30",
                              "mandatory": true
                          },
                      ]
                  },
              ]
          }
      }

  AccountActions.csv:
    content: |
      #Tenant,Account,ActionPlanId,ActionTriggersId,AllowNegative,Disabled
      cgrates.org,1001,,,,

  Chargers.csv:
    content: |
      #Tenant,ID,FilterIDs,ActivationInterval,RunID,AttributeIDs,Weight
      cgrates.org,DEFAULT,,,*default,*none,0

  Filters.csv:
    content: |
      #Tenant[0],ID[1],Type[2],Element[3],Values[4],ActivationInterval[5]
      cgrates.org,FLTR_RES,*string,~*req.Session-Id,*voice,2014-07-29T15:00:00Z

  RatingProfiles.csv:
    content: |
      #Tenant,Category,Subject,ActivationTime,RatingPlanId,RatesFallbackSubject
      cgrates.org,call,*any,2014-01-14T00:00:00Z,RP_BG,

  RatingPlans.csv:
    content: |
      #Id,DestinationRatesId,TimingTag,Weight
      RP_BG,DR_BG,*any,10

  DestinationRates.csv:
    content: |
      #Id,DestinationId,RatesTag,RoundingMethod,RoundingDecimals,MaxCost,MaxCostStrategy
      DR_BG,DST_359,RT_PM,*up,4,0.12,*disconnect

  Destinations.csv:
    content: |
      #Id,Prefix
      DST_359,359

  Rates.csv:
    content: |
      #Id,ConnectFee,Rate,RateUnit,RateIncrement,GroupIntervalStart
      RT_PM,0,13,60s,1s,0s

