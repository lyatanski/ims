services:
  ocs:
    image: ghcr.io/lyatanski/cgr-engine
    configs:
    - source: cgrates.json
      target: /etc/cgrates/cgrates.json
    expose:
    - 3868/tcp
    - 2012/tcp

  preload:
    image: python:alpine
    command: python /opt/preload.py
    configs:
    - source: preload.py
      target: /opt/preload.py
    depends_on:
      ocs:
        condition: service_started

  trace:
    profiles:
    - debug
    network_mode: service:ocs
    command: -d any port 2012 or port 2014
    build:
      context: .
      dockerfile_inline: |
        FROM alpine
        RUN apk add ngrep
        ENTRYPOINT ["ngrep"]


configs:
  cgrates.json:
    content: |
      {
          "general": {
              "log_level": 7,
          },
          "data_db": {
              "db_type": "*internal",
          },
          "stor_db": {
              "db_type": "*internal",
          },
          "listen": {
              "rpc_json": ":2012",
              //"rpc_gob": "",    // turn off 2013
          },
          "apiers": {
              "enabled": true,
              "caches_conns":["*localhost"],
          },
          "sessions": {
              "enabled": true,
              //"listen_bijson": "",    // turn off 2014
              "chargers_conns": ["*localhost"],
              "rals_conns": ["*localhost"],
              "thresholds_conns": [],
          },
          "rals": {
              "enabled": true,
              "thresholds_conns": [],
              "sessions_conns": ["*localhost"],
          },
          "schedulers": {
              "enabled": true,
          },
          "chargers": {
              "enabled": true,
              "indexed_selects": false,
          },
          "thresholds": {
              "enabled": false,
              "store_interval": "-1",
              "sessions_conns": ["*localhost"],
          },
          "templates": {
              "*ccr": [
                  {
                      "tag": "ToR", "path": "*cgreq.ToR",
                      "type": "*constant", "value": "*voice",
                  },
                  {
                      "tag": "Category", "path": "*cgreq.Category",
                      "type": "*constant", "value": "call"
                  },
                  {
                      "tag": "RequestType", "path": "*cgreq.RequestType",
                      "type": "*constant", "value": "*prepaid",
                  },
                  {
                      "tag": "OriginID", "path": "*cgreq.OriginID",
                      "type": "*variable", "mandatory": true,
                      "value": "~*req.Session-Id",
                  },
                  {
                      "tag": "Destination", "path": "*cgreq.Destination",
                      "type": "*variable", "mandatory": true,
                      "value": "~*req.Service-Information.IMS-Information.Called-Party-Address",
                  },
                  {
                      "tag": "Account", "path": "*cgreq.Account",
                      //"type": "*variable",
                      //"value": "~*req.Service-Information.Subscription-Id.Subscription-Id-Data",
                      "type": "*constant", "value": "Test",
                  },
                  {
                      "tag": "Usage", "path": "*cgreq.Usage",
                      "type": "*variable", //"mandatory": true,
                      "value": "~*req.Multiple-Services-Credit-Control.Requested-Service-Unit.CC-Time:s/(.*)/$${1}s/",
                  },
                  {
                      "tag": "SubscriberID", "path": "*cgreq.SubscriberId",
                      "type": "*variable", "mandatory": true,
                      "value": "~*req.Subscription-Id.Subscription-Id-Data",
                  },
              ],
          },
          "diameter_agent": {
              "enabled": true,
              "sessions_conns": ["*localhost"],
              "listen": ":3868",
              "listen_net": "tcp",
              "origin_host": "ocs.${REALM}",
              "origin_realm": "${REALM}",
              "request_processors": [
                  {
                      "id": "VoiceInit",
                      "filters": [ "*string:~*vars.*cmd:CCR", "*string:~*req.CC-Request-Type:1" ],
                      "flags": [ "*initiate", "*accounts" ],
                      "request_fields": [
                          { "tag": "CCRTemplate", "type": "*template", "value": "*ccr" },
                      ],
                      "reply_fields": [
                          { "tag": "CCATemplate", "type": "*template", "value": "*cca" },
                          {
                              "tag": "GrantedUnits",
                              "path": "*rep.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Time",
                              "type": "*constant",
                              "value": "30",
                              "mandatory": true,
                          },
                      ]
                  },
                  {
                      "id": "VoiceUpdate",
                      "filters": [ "*string:~*vars.*cmd:CCR", "*string:~*req.CC-Request-Type:2" ],
                      "flags": [ "*update", "*accounts" ],
                      "request_fields": [
                          { "tag": "CCRTemplate", "type": "*template", "value": "*ccr" },
                      ],
                      "reply_fields": [
                          { "tag": "CCATemplate", "type": "*template", "value": "*cca" },
                          {
                              "tag": "GrantedUnits",
                              "path": "*rep.Multiple-Services-Credit-Control.Granted-Service-Unit.CC-Time",
                              "type": "*constant",
                              "value": "30",
                              "mandatory": true,
                          },
                      ]
                  },
                  {
                      "id": "VoiceTerm",
                      "filters": [ "*string:~*vars.*cmd:CCR", "*string:~*req.CC-Request-Type:3" ],
                      "flags": [ "*terminate", "*accounts" ],
                      "request_fields": [
                          { "tag": "CCRTemplate", "type": "*template", "value": "*ccr" },
                          {
                              "tag": "Usage", "path": "*cgreq.Usage",
                              "type": "*variable", //"mandatory": true,
                              "value": "~*req.Multiple-Services-Credit-Control.Used-Service-Unit.CC-Time:s/(.*)/$${1}s/",
                          },
                      ],
                      "reply_fields": [
                          { "tag": "CCATemplate", "type": "*template", "value": "*cca" },
                      ]
                  },
              ]
          }
      }

  preload.py:
    content: |
      import json, socket, itertools

      class JSONClient(object):

          def __init__(self, addr):
              self._socket = socket.create_connection(addr)
              self._id_iter = -1

          def _message(self, name, *params):
              self._id_iter += 1
              return dict(id=self._id_iter,
                          params=list(params),
                          method=name)

          def call(self, name, *params):
              request = self._message(name, *params)
              msg = json.dumps(request)
              self._socket.sendall(msg.encode())

              response = self._socket.recv(4096)
              response = json.loads(response.decode())

              if response['id'] != request['id']:
                  raise Exception(f"id expected:{request['id']}, received:{response['id']}")

              if response.get('error') is not None:
                  raise Exception(response.get('error'))

              print(name, response.get('result'))
              return response.get('result')

          def close(self):
              self._socket.close()


      rpc =JSONClient(("ocs", 2012))

      #rpc.call("ApierV2.Ping", {'Tenant':'cgrates.org'})
      rpc.call("ApierV2.SetTPDestination", {
          "TPid": "cgrates.org",
          "ID": "DST_TEST",
          "Prefixes": ["614"]
      })
      rpc.call("ApierV2.SetTPRate", {
          "TPid":"cgrates.org",
          "ID":"RT_TEST",
          "RateSlots":[
              {"ConnectFee":0,"Rate":22,"RateUnit":"60s","RateIncrement":"60s","GroupIntervalStart":"0s"}
          ]
      })
      rpc.call("ApierV2.SetTPDestinationRate", {
          "TPid": "cgrates.org",
          "ID": "DR_TEST",
          "DestinationRates": [
              {
                  "DestinationId": "DST_TEST",
                  "RateId": "RT_TEST",
                  "Rate": None,
                  "RoundingMethod": "*up",
                  "RoundingDecimals": 4,
                  "MaxCost": 0,
                  "MaxCostStrategy": ""
              }
          ]
      })
      rpc.call("ApierV2.SetTPRatingPlan", {
          "TPid": "cgrates.org",
          "ID": "RatingPlan_VoiceCalls",
          "RatingPlanBindings": [
              {
                  "DestinationRatesId": "DR_TEST",
                  "TimingId": "*any",
                  "Weight": 10
              }
          ]
      })
      rpc.call("ApierV2.LoadTariffPlanFromStorDb", {
          "TPid": "cgrates.org",
          "DryRun": False,
          "Validate": True,
          "APIOpts": None,
          "Caching": None
      })
      rpc.call("ApierV2.SetRatingProfile", {
          "TPid": "RP_TEST",
          "Overwrite": True,
          "LoadId" : "APItest",
          "Tenant": "cgrates.org",
          "Category": "call",
          "Subject": "*any",
          "RatingPlanActivations": [
              {
                  "ActivationTime": "2014-01-14T00:00:00Z",
                  "RatingPlanId": "RatingPlan_VoiceCalls",
                  "FallbackSubjects": ""
              }
          ]
      })
      rpc.call("ApierV2.SetChargerProfile", {
          "Tenant": "cgrates.org",
          "ID": "DEFAULT",
          'FilterIDs': [],
          'AttributeIDs' : ['*none'],
          'Weight': 0,
      })
      rpc.call("ApierV2.SetAccount", {
          "Tenant": "cgrates.org",
          "Account": "Test"
      })
      rpc.call("ApierV2.SetBalance", {
          "Tenant": "cgrates.org",
          "Account": "Test",
          "BalanceType": "*voice",
          "Categories": "*any",
          "Balance": {
              "ID": "5minute",
              "Value": "5m",
              "Weight": 25
          }
      })
      rpc.call("ApierV2.GetAccount",{
          'Tenant': 'cgrates.org',
          'Account': 'Test'
      })

