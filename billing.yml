services:
  ocs:
    configs:
    - source: cgrates.json
      target: /etc/cgrates/cgrates.json
    expose:
    - 3868/tcp
    build:
      context: .
      dockerfile_inline: |
        FROM golang:alpine AS build
        RUN apk add jq
        RUN VERSION=$(wget -qO - https://api.github.com/repos/cgrates/cgrates/releases/latest | jq -r .tag_name | cut -dv -f2) && \
            wget -O - https://github.com/cgrates/cgrates/archive/refs/tags/v$$VERSION.tar.gz | tar -xzf - && \
            mv cgrates-$$VERSION cgrates
        WORKDIR /go/cgrates/cmd/cgr-engine/
        RUN go build -ldflags "-s -w"
        RUN mkdir -p /usr/share/cgrates/diameter/dict/ && cp cgr-engine /sbin/

        FROM scratch
        RUN --mount=type=bind,from=build,source=/lib/,target=/lib \
            --mount=type=bind,from=build,source=/bin/,target=/bin \
            --mount=type=bind,from=build,source=/go/cgrates/cmd/cgr-engine/,target=/opt/build \
            mkdir -p /sbin /usr/share/cgrates/diameter/dict/ && cp /opt/build/cgr-engine /sbin/
        ENTRYPOINT ["/sbin/cgr-engine"]

  loader:
    configs:
    - source: Destinations.csv
      target: /var/cgrates/Destinations.csv
    - source: Rates.csv
      target: /var/cgrates/Rates.csv
    - source: DestinationRates.csv
      target: /var/cgrates/DestinationRates.csv
    - source: RatingPlans.csv
      target: /var/cgrates/RatingPlans.csv
    - source: RatingProfiles.csv
      target: /var/cgrates/RatingProfiles.csv
    network_mode: service:ocs
    build:
      context: .
      dockerfile_inline: |
        FROM golang:alpine AS build
        RUN apk add jq
        RUN VERSION=$(wget -qO - https://api.github.com/repos/cgrates/cgrates/releases/latest | jq -r .tag_name | cut -dv -f2) && \
            wget -O - https://github.com/cgrates/cgrates/archive/refs/tags/v$$VERSION.tar.gz | tar -xzf - && \
            mv cgrates-$$VERSION cgrates
        WORKDIR /go/cgrates/cmd/cgr-loader/
        RUN go build -ldflags "-s -w"
        RUN mkdir -p /usr/share/cgrates/diameter/dict/ && cp cgr-loader /sbin/

        FROM scratch
        RUN --mount=type=bind,from=build,source=/lib/,target=/lib \
            --mount=type=bind,from=build,source=/bin/,target=/bin \
            --mount=type=bind,from=build,source=/go/cgrates/cmd/cgr-loader/,target=/opt/build \
            mkdir -p /sbin /usr/share/cgrates/diameter/dict/ && cp /opt/build/cgr-loader /sbin/
        ENTRYPOINT ["/sbin/cgr-loader", "-verbose", "-datadb_type", "*internal", "-path", "/var/cgrates/"]


configs:
  cgrates.json:
    content: |
      {
          "general": {
              "logger": "*stdout",
              "log_level": 7,
          },
          "data_db": {
              "db_type": "*internal",
          },
          "stor_db": {
              "db_type": "*internal",
          },
          "rals": {
              "enabled": true,
          },
          "schedulers": {
              "enabled": true,
          },
          "cdrs": {
              "enabled": true,
          },
          "attributes": {
              "enabled": true,
          },
          "chargers": {
              "enabled": true,
              "attributes_conns": ["*internal"],
          },
          "sessions": {
              "enabled": true,
          },
          "apiers": {
              "enabled": true,
              "caches_conns":["*internal"],
          },
          "diameter_agent": {
              "enabled": true,
              "listen": "0.0.0.0:3868",
              "listen_net": "tcp",
              "origin_host": "ocs.${REALM}",
              "origin_realm": "${REALM}",
              "request_processors": [
                  {
                      "id": "call",
                      "flags": ["*event", "*accounts", "*cdrs"],
                      "request_fields":[
                          {
                              "tag": "ToR",
                              "path": "*cgreq.ToR",
                              "type": "*constant",
                              "value": "*voice",
                          },
                          {
                              "tag": "OriginID",
                              "path": "*cgreq.OriginID",
                              "type": "*variable",
                              "mandatory": true,
                              "value": "~*req.Multiple-Services-Credit-Control.Service-Identifier",
                          },
                          {
                              "tag": "OriginHost",
                              "path": "*cgreq.OriginHost",
                              "mandatory": true,
                              "type": "*variable",
                              "value": "*vars.OriginHost",
                          },
                          {
                              "tag": "RequestType",
                              "path": "*cgreq.RequestType",
                              "type": "*constant",
                              "value": "*prepaid",
                          },
                          {
                              "tag": "Category",
                              "path": "*cgreq.Category",
                              "type": "*constant",
                              "value": "voice",
                          },
                          {
                              "tag": "Account",
                              "path": "*cgreq.Account",
                              "type": "*variable",
                              "mandatory": true,
                              "value": "~*req.Subscription-Id.Subscription-Id-Data",
                          },
                          {
                              "tag": "Destination",
                              "path": "*cgreq.Destination",
                              "type": "*variable",
                              "mandatory": true,
                              "value": "~*req.Service-Information.IMS-Information.Called-Party-Address",
                          },
                          {
                              "tag": "SetupTime",
                              "path": "*cgreq.SetupTime",
                              "type": "*variable",
                              "mandatory": true,
                              "value": "~*req.Event-Timestamp",
                          },
                          {
                              "tag": "AnswerTime",
                              "path": "*cgreq.AnswerTime",
                              "type": "*variable",
                              "mandatory": true,
                              "value": "~*req.Event-Timestamp",
                          },
                          {
                              "tag": "Usage",
                              "path": "*cgreq.Usage",
                              "type": "*variable",
                              "mandatory": true,
                              "filters":[
                                  "*notempty:~*req.Multiple-Services-Credit-Control.Requested-Service-Unit.CC-Time:",
                              ],
                              "value": "~*req.Multiple-Services-Credit-Control.Requested-Service-Unit.CC-Time",
                          },
                          {
                              "tag": "Usage",
                              "path": "*cgreq.Usage",
                              "type": "*variable",
                              "mandatory": true,
                              "filters":[
                                  "*notempty:~*req.Multiple-Services-Credit-Control.Used-Service-Unit.CC-Time:",
                              ],
                              "value": "~*req.Multiple-Services-Credit-Control.Used-Service-Unit.CC-Time",
                          },
                      ]
                  },
              ],
              "reply_fields":[
                  {
                      "tag": "CCATemplate",
                      "type": "*template",
                      "value": "*cca"
                  },
                  {
                      "tag": "ResultCode",
                      "filters": ["*eq:~*cgrep.MaxUsage:0"],
                      "path": "*rep.Result-Code",
                      "blocker": true,
                      "type": "*constant",
                      "value": "4012"
                  },
                  {
                      "tag": "ResultCode",
                      "filters": ["*notempty:~*cgrep.Error:"],
                      "path": "*rep.Result-Code",
                      "blocker": true,
                      "type": "*constant",
                      "value": "5030"
                  },
              ],
          },
      }

  Destinations.csv:
    content: |
      #Id,Prefix
      DST_BG,359

  Rates.csv:
    content: |
      #Id,ConnectFee,Rate,RateUnit,RateIncrement,GroupIntervalStart
      RT_FREE,0,0,60s,60s,0s

  DestinationRates.csv:
    content: |
      #Id,DestinationId,RatesTag,RoundingMethod,RoundingDecimals,MaxCost,MaxCostStrategy
      DR_MAIN,DST_BG,RT_FREE,*up,4,1,*disconnect

  RatingPlans.csv:
    content: |
      #Id,DestinationRatesId,TimingTag,Weight
      RP_MAIN,DR_MAIN,*any,10

  RatingProfiles.csv:
    content: |
      #Tenant,Category,Subject,ActivationTime,RatingPlanId,RatesFallbackSubject
      cgrates.org,call,*any,2025-01-01T00:00:00Z,RP_MAIN,

