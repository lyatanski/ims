services:
  ocs:
    configs:
    - source: cgrates.json
      target: /etc/cgrates/cgrates.json
    expose:
    - 3868/tcp
    build:
      context: .
      dockerfile_inline: |
        FROM golang:alpine AS build
        RUN apk add jq
        RUN VERSION=$(wget -qO - https://api.github.com/repos/cgrates/cgrates/releases/latest | jq -r .tag_name | cut -dv -f2) && \
            wget -O - https://github.com/cgrates/cgrates/archive/refs/tags/v$$VERSION.tar.gz | tar -xzf - && \
            mv cgrates-$$VERSION cgrates
        WORKDIR /go/cgrates/cmd/cgr-engine/
        RUN go build -ldflags "-s -w"
        FROM scratch
        RUN --mount=type=bind,from=build,source=/lib/,target=/lib \
            --mount=type=bind,from=build,source=/bin/,target=/bin \
            --mount=type=bind,from=build,source=/go/cgrates/cmd/cgr-engine/,target=/opt/build \
            mkdir -p /sbin /usr/share/cgrates/diameter/dict/ && cp /opt/build/cgr-engine /sbin/
        ENTRYPOINT ["/sbin/cgr-engine"]


configs:
  cgrates.json:
    content: |
      {
          "general": {
              "logger": "*stdout",
              "log_level": 7,
          },
          "data_db": {
              "db_type": "*internal",
          },
          "stor_db": {
              "db_type": "*internal",
          },
          "sessions": {
              "enabled": true,
          },
          "diameter_agent": {
              "enabled": true,
              "listen": "0.0.0.0:3868",
              "listen_net": "tcp",
              "origin_host": "ocs.${REALM}",
              "origin_realm": "${REALM}",
              "request_processors": [
                  {
                      "id": "call",
                      "flags": ["*dryrun", "*event", "*accounts", "*cdrs"],
                      "request_fields":[
                          {
                              "tag": "OriginHost",
                              "path": "*cgreq.OriginHost",
                              "mandatory": true,
                              "type": "*variable",
                              "value": "*vars.OriginHost",
                          },
                          {
                              "tag": "RequestType",
                              "path": "*cgreq.RequestType",
                              "type": "*constant",
                              "value": "*prepaid",
                          },
                      ]
                  },
              ],
              "reply_fields":[
                  {
                      "tag": "CCATemplate",
                      "type": "*template",
                      "value": "*cca"
                  },
                  {
                      "tag": "ResultCode",
                      "filters": ["*eq:~*cgrep.MaxUsage:0"],
                      "path": "*rep.Result-Code",
                      "blocker": true,
                      "type": "*constant",
                      "value": "4012"
                  },
                  {
                      "tag": "ResultCode",
                      "filters": ["*notempty:~*cgrep.Error:"],
                      "path": "*rep.Result-Code",
                      "blocker": true,
                      "type": "*constant",
                      "value": "5030"
                  },
              ],
          },
      }
