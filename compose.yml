include:
- core.yml
- billing.yml
- monitor.yml


x-kamailio: &kamailio
  image: kamailio
  command: -f /etc/ims/kamailio.cfg
  environment: &env
    REALM: ${REALM}
  expose:
  - 5060/tcp
  - 5060/udp
  dns: ${DNSIP}

services:
  pcscf:
    << : *kamailio
    environment:
      << : *env
      IPSEC: ${IPSEC}
    configs:
    - source: pcscf.cfg
      target: /etc/ims/kamailio.cfg
    - source: pcscf.xml
      target: /etc/ims/diameter.xml
    - source: monitor.cfg
      target: /etc/ims/monitor.cfg
    cap_add:
    - NET_ADMIN
    networks:
      default:
        ipv4_address: ${IPSEC}
    depends_on:
      kmod:
        condition: service_completed_successfully
    build:
      context: .
      dockerfile_inline: |
        FROM alpine:edge
        RUN apk add kamailio-extras kamailio-ims kamailio-mysql kamailio-presence kamailio-debugger
        ENTRYPOINT ["kamailio", "-DD", "-E"]

  icscf:
    << : *kamailio
    configs:
    - source: icscf.cfg
      target: /etc/ims/kamailio.cfg
    - source: icscf.xml
      target: /etc/ims/diameter.xml
    - source: monitor.cfg
      target: /etc/ims/monitor.cfg
    depends_on:
      dbprep:
        condition: service_completed_successfully

  scscf:
    << : *kamailio
    configs:
    - source: scscf.cfg
      target: /etc/ims/kamailio.cfg
    - source: scscf.xml
      target: /etc/ims/diameter.xml
    - source: monitor.cfg
      target: /etc/ims/monitor.cfg

  dns:
    image: coredns/coredns
    command: -conf /etc/coredns/Corefile
    configs:
    - source: dns
      target: /etc/coredns/Corefile
    networks:
      default:
        ipv4_address: ${DNSIP}


  rtpengine:
    command: --no-log-timestamps --config-file=/etc/rtpengine.conf
    configs:
    - source: rtpengine
      target: /etc/rtpengine.conf
    networks:
      default:
        ipv4_address: ${RTPIP}
    build:
      context: .
      dockerfile_inline: |
         FROM ubuntu:noble
         RUN apt update && apt install --no-install-recommends -y rtpengine-daemon
         ENTRYPOINT ["rtpengine"]

  ## as UE IPs will not be in the setup IP range, they need special attention
  ## TODO: to be relevant when PGW is involved
  #route:
  #  image: alpine
  #  command: ip route add ${POOL} via ${SGI}
  #  network_mode: service:pcscf
  #  cap_add:
  #  - NET_ADMIN

  kmod:
    image: alpine
    command:
    - modprobe
    - -a
    - ah4
    - ah6
    - esp4
    - esp6
    - xfrm4_tunnel
    - xfrm6_tunnel
    - xfrm_user
    - ip_tunnel
    - tunnel4
    - tunnel6
    cap_add:
    - SYS_MODULE
    volumes:
    - /lib/modules:/lib/modules

  dbprep:
    image: mariadb
    command:
    - sh
    - -c
    - mariadb --skip-ssl --host maria < /opt/icscf.sql
    tmpfs:
    - /var/lib/mysql
    configs:
    - source: icscf.sql
      target: /opt/icscf.sql
    restart: on-failure

  maria:
    image: mariadb
    environment:
      MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: true
    tmpfs:
    - /var/lib/mysql

  test:
    profiles:
    - test
    command: python3 /opt/test.py
    environment:
      K:     ${K}
      OPC:   ${OPC}
      PLMN:  ${MCC}${MNC}
      DIAL:  ${DIAL}
      REALM: ims.${REALM}
      PCSCF: pcscf
      IPSEC: /usr/lib/ipsec.so
    cap_add:
    - NET_ADMIN
    deploy:
      replicas: ${SCALE}
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:jammy AS build
        RUN apt update && apt install -y --no-install-recommends \
        git build-essential cmake ninja-build libtool yasm  bind9-host \
        ragel \
        libsrtp2-dev libssl-dev libopus-dev \
        libspeexdsp-dev \
        libavutil-dev libswscale-dev libavcodec-dev \
        libvpx-dev libyuv-dev libgsm1-dev swig \
        python3-dev  python3-pip
        RUN git clone --depth=1 https://github.com/lyatanski/doubango.git
        WORKDIR doubango
        RUN cmake -B out -G Ninja #-D CMAKE_BUILD_TYPE=Debug
        RUN cmake --build out --target install && cp out/_deps/libmnl/usr/lib/libmnl.so* /usr/local/lib/ && ldconfig

        FROM ubuntu:jammy
        RUN apt update && apt install --no-install-recommends -y python3-pip iproute2 bind9-host
        COPY --from=build /doubango/out/_deps/libmnl/usr/lib/libmnl.so* /usr/local/lib/
        COPY --from=build /doubango/out/plugins/ipsec_linux/ipsec.so /usr/lib/
        RUN --mount=type=bind,from=build,source=/doubango/out/bindings/python/,target=/opt/python,rw ldconfig && pip install /opt/python
    configs:
    - source: test.py
      target: /opt/test.py


configs:
  monitor.cfg:
    content: |
      http_reply_parse=yes
      tcp_accept_no_cl=yes
      loadmodule "xhttp.so"
      loadmodule "xhttp_prom.so"
      modparam("xhttp_prom", "xhttp_prom_stats", "all")
      event_route[xhttp:request] {
      	if(prom_check_uri())
      		prom_dispatch();
      	else
      		xhttp_reply("200", "OK", "text/html", "<html><body>Wrong URL $$hu</body></html>");
      }

  pcscf.cfg:
    file: cscf/proxy.cfg

  pcscf.xml:
    content: |
      <?xml version="1.0" encoding="UTF-8"?>
      <DiameterPeer
          FQDN="pcscf.ims.${REALM}"
          Realm="ims.${REALM}"
          Vendor_Id="10415"
          Product_Name="CDiameterPeer"
          Workers="1"
      >
              <Peer FQDN="pcrf.epc.${REALM}" Realm="epc.${REALM}" port="3868"/>
              <Auth id="16777236" vendor="10415"/> <!-- Rx 3GPP -->
              <SupportedVendor vendor="10415" />
              <DefaultRoute FQDN="pcrf.epc.${REALM}" metric="1"/>
      </DiameterPeer>

  icscf.cfg:
    file: cscf/interrogating.cfg

  icscf.xml:
    content: |
      <?xml version="1.0" encoding="UTF-8"?>
      <DiameterPeer
          FQDN="icscf.ims.${REALM}"
          Realm="ims.${REALM}"
          Vendor_Id="10415"
          Product_Name="CDiameterPeer"
          Workers="1"
      >
              <Peer FQDN="hss.epc.${REALM}" Realm="epc.${REALM}" port="3868"/>
              <Auth id="16777216" vendor="10415"/> <!-- Cx 3GPP -->
              <SupportedVendor vendor="10415" />
              <DefaultRoute FQDN="hss.epc.${REALM}" metric="1"/>
      </DiameterPeer>

  icscf.sql:
    content: |
      CREATE DATABASE IF NOT EXISTS icscf;
      USE icscf;
      CREATE TABLE IF NOT EXISTS nds_trusted_domains (
        id int(11) NOT NULL AUTO_INCREMENT,
        trusted_domain varchar(83) NOT NULL DEFAULT '',
        PRIMARY KEY (id)
      );
      CREATE TABLE IF NOT EXISTS s_cscf_capabilities (
        id int(11) NOT NULL AUTO_INCREMENT,
        id_s_cscf int(11) NOT NULL DEFAULT 0,
        capability int(11) NOT NULL DEFAULT 0,
        PRIMARY KEY (id),
        KEY idx_capability (capability),
        KEY idx_id_s_cscf (id_s_cscf)
      );
      CREATE TABLE IF NOT EXISTS s_cscf (
        id int(11) NOT NULL AUTO_INCREMENT,
        name varchar(83) NOT NULL DEFAULT '',
        s_cscf_uri varchar(83) NOT NULL DEFAULT '',
        PRIMARY KEY (id)
      );
      INSERT IGNORE INTO s_cscf (s_cscf_uri) VALUES ('sip:scscf.ims.${REALM}');

  scscf.cfg:
    file: cscf/serving.cfg

  scscf.xml:
    content: |
      <?xml version="1.0" encoding="UTF-8"?>
      <DiameterPeer
          FQDN="scscf.ims.${REALM}"
          Realm="ims.${REALM}"
          Vendor_Id="10415"
          Product_Name="CDiameterPeer"
          Workers="1"
      >
              <Peer FQDN="hss.epc.${REALM}" Realm="epc.${REALM}" port="3868"/>
              <Peer FQDN="ocs.${REALM}" Realm="${REALM}" port="3868"/>
              <Auth id="16777216" vendor="10415"/> <!-- Cx 3GPP -->
              <Auth id="4"        vendor="10415"/> <!-- Ro 3GPP -->
              <SupportedVendor vendor="10415" />
              <DefaultRoute FQDN="hss.epc.${REALM}" metric="1"/>
      </DiameterPeer>

  rtpengine:
    content: |
      [rtpengine]
      foreground = true
      log-level = 6
      log-stderr = true
      table = -1
      listen-ng = 0.0.0.0:9910
      interface = internal/${RTPIP}
      timeout = 60
      silent-timeout = 3600
      tos = 184
      port-min = 30000
      port-max = 40000

  dns:
    content: |
      . {
          errors
          log
          health {
             lameduck 5s
          }
          ready
          template IN SRV {
              match (^|[.])(?P<name>.cscf)\.ims\.mnc\d{2,3}\.mcc\d{3}\.3gppnetwork.org
              answer "{{ .Name }} 1D SRV 0 0 5060 {{ .Group.name }}."
              fallthrough
          }
          template IN SRV {
              match ims\.mnc\d{2,3}\.mcc\d{3}\.3gppnetwork.org
              answer "{{ .Name }} 1D SRV 0 0 5060 icscf."
              fallthrough
          }
          template IN ANY {
              match (^|[.])(?P<name>[^.]*).*\.mnc\d{2,3}\.mcc\d{3}\.3gppnetwork.org
              answer "{{ .Name }} 1D IN CNAME {{ .Group.name }}."
              fallthrough
          }
          forward . /etc/resolv.conf
          cache 30
          loop
          reload
          loadbalance
      }

  test.py:
    file: test.py


networks:
  default:
    ipam:
      config:
        - subnet: ${SUBNET}
