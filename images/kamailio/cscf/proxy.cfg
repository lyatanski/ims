#!KAMAILIO
# Proxy Call Session Control Function (P-CSCF)
# Diameter Rx: 3GPP TS 29.214

#!trydefenvs DBURL
#!defenvs REALM
#!defenvs IPSEC
#!defexps SERVER "pcscf.ims." + REALM
#!defexps EPC_REALM "epc." + REALM
#!define FLT_DIALOG 1
#!define HEALTH cdp_has_app("16777236")

#listen = [::]:5060 advertise SERVER name "Mw"
listen = 0.0.0.0:5060 advertise SERVER name "Mw"
user_agent_header = "User-Agent: Proxy-CSCF"
server_header = "Server: Proxy-CSCF"
children = 1
debug = 3
tcp_reuse_port = yes
mlock_pages = yes
shm_mem_size = 256

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "rr"
loadmodule "kex"
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "textops"
loadmodule "siputils"
loadmodule "ims_usrloc_pcscf"
loadmodule "ims_ipsec_pcscf"
#loadmodule "pua" # for reginfo
loadmodule "ims_registrar_pcscf"
loadmodule "ims_dialog"
loadmodule "ims_qos"

loadmodule "xlog"
modparam("xlog", "prefix", "[$ci $rm-$cs] ")
modparam("xlog", "prefix_mode", 1)

import_file "monitor.cfg"

loadmodule "debugger"
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 3) # L_DBG

modparam("rr", "enable_full_lr", 1)
modparam("cdp", "config_file", "/etc/cscf/diameter.xml")
modparam("ims_dialog", "dlg_flag", FLT_DIALOG)

#modparam("ims_registrar_pcscf", "delete_delay", 1)

# RFC 2406 2.1  Security Parameters Index
# The set of SPI values in the range 1 through 255 are reserved by the
# Internet Assigned Numbers Authority (IANA) for future use
modparam("ims_ipsec_pcscf", "ipsec_spi_id_start", 256)
modparam("ims_ipsec_pcscf", "ipsec_spi_id_range", 1000000)
modparam("ims_ipsec_pcscf", "ipsec_listen_addr", IPSEC)
#modparam("ims_ipsec_pcscf", "ipsec_listen_addr6", "::")

modparam("ims_qos", "rx_dest_realm", EPC_REALM)               # Destination-Realm AVP

#!ifdef DBURL
#!defexps DB_URL "redis://" + DBURL

loadmodule "db_redis"
modparam("db_redis", "schema_path", "/etc/cscf/schema/proxy")

modparam("db_redis", "keys", "location=entry:aor,received_port")
modparam("ims_usrloc_pcscf", "db_mode", 1)
modparam("ims_usrloc_pcscf", "db_url", DB_URL)

#modparam("db_redis", "keys", "dialog_in=entry:hash_entry,hash_id")
#modparam("db_redis", "keys", "dialog_out=entry:id")
#modparam("db_redis", "keys", "dialog_vars=entry:hash_entry,hash_id")
#modparam("ims_dialog", "db_mode", 1)
#modparam("ims_dialog", "db_url", DB_URL)
#!endif


request_route {
	loose_route();

	# Strip Transport from Request URI
	#$ru = $(ru{re.subst,/;transport=[A-Za-z]*//g});

	xinfo("====== $rm <$route_uri>\n");
	if($rm == "REGISTER") {
		route(REGISTER);
	} else if($route_uri =~ "sip:orig@.*") {
		route(MORIG);
	} else {
		$var(term) = true;
		route(MTERM);
	}

	if(!is_method("REGISTER|SUBSCRIBE"))
		setflag(FLT_DIALOG);

	if(is_method("INVITE"))
		t_on_reply("AAR");

	if(!$var(term)) {
		append_hf("P-Visited-Network-ID: ims."+REALM+"\r\n");
	}

	if(has_totag() && is_myself($route_uri)) {
		remove_hf_idx("Route", "1");
		loose_route();
		# from kex
		#if(is_myself($route_uri)) {
		if($route_uri =~ "sip:pcscf.*") {
			route(MTERM);
		}
	}

	# help requests comming from S-CSCF find their way
	record_route();

	t_relay();
}

route[REGISTER] {
	if(!is_present_hf("Contact")) {
		send_reply("403", "No Contact header");
		exit;
	}

	pcscf_save_pending("location");

	# RFC 3327
	# necessary for the S-CSCF to be able to route requests
	append_hf("Path: <sip:term@"+SERVER+";lr>\r\n");
	remove_hf("Supported");
	append_hf("Supported: path\r\n");
	remove_hf("Require");
	append_hf("Require: path\r\n");

	t_on_reply("RESP");
}

onreply_route[RESP] {
	if(t_check_status("200")) {
		pcscf_save("location");
	}

	# TS 24.229 5.2.2.2
	# When the P-CSCF receives a 401 (Unauthorized) response to a REGISTER request,
	# the P-CSCF shall remove the "ck" and "ik" WWW-Authenticate header field
	if(t_check_status("401")) {
		ipsec_create("location");
		if(is_present_hf("WWW-Authenticate")) {
			remove_hf("WWW-Authenticate");
			append_hf("WWW-Authenticate: $(hdr(WWW-Authenticate){re.subst,/(ck|ik)+=\"(.+?)\",//gi})\r\n");
		}
	}
}

route[MORIG] {
	if(!pcscf_is_registered("location")) {
		send_reply("403","Forbidden - You must register first with a S-CSCF");
		exit;
	}

	# from siputils
	sip_p_charging_vector("g");

	# RFC 3325
	remove_hf("P-Asserted-Identity");
	remove_hf("P-Preferred-Identity");
	if(is_present_hf("P-Preferred-Identity") && pcscf_assert_identity("location", "$hdr(P-Preferred-Identity)")) {
		append_hf("P-Asserted-Identity: $hdr(P-Preferred-Identity)\r\n");
	} else if(is_present_hf("P-Asserted-Identity") && pcscf_assert_identity("location", "$hdr(P-Asserted-Identity)")) {
		append_hf("P-Asserted-Identity: $hdr(P-Asserted-Identity)\r\n");
	} else {
		append_hf("P-Asserted-Identity: <$pcscf_asserted_identity>\r\n");
	}

	$var(sechdr) = "Require";
	route(RMSEC);
	$var(sechdr) = "Proxy-Require";
	route(RMSEC);
}

route[RMSEC] {
	if(is_present_hf($var(sechdr))) {
		remove_hf($var(sechdr));
		$var(hdr) = $(hdr($var(sechdr)){re.subst,/[, ]*sec-agree//gi});
		if($(var(hdr){s.len}) > 0) {
			append_hf("$var(sechdr): $var(hdr)\r\n");
		}
	}
}

route[MTERM] {
	ipsec_forward("location");
	$du = $ru;
}

# Diameter Rx: AA-Request (AAR)
onreply_route[AAR] {
	if(has_body("application/sdp")) {
		Rx_AAR("AAA", "orig", "", -1);
	}
}

# Diameter Rx: AA-Answer (AAA)
route[AAA] {
	xinfo("AAR return code: $avp(s:aar_return_code)\n");
}

