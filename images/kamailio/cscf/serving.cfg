#!KAMAILIO
# Serving Call Session Control Function (S-CSCF)
# Diameter Cx: 3GPP TS 29.229
# Diameter Ro: 3GPP TS 32.299

#!trydefenvs DBURL
#!defenvs RTPADR
#!defenvs REALM
#!defexps SERVER    "scscf.ims." + REALM
#!defexps SRVURI    "sip:" + SERVER
#!defexps EPC_REALM "epc." + REALM
#!define FLT_DIALOG 1
#!define HEALTH cdp_has_app("16777216")

listen=0.0.0.0:5060 advertise SERVER name "Mw"
user_agent_header="User-Agent: Serving-CSCF"
server_header="Server: Serving-CSCF"
children=1
debug=3

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "rr"
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "textops"
loadmodule "presence"
loadmodule "ims_dialog"
loadmodule "ims_charging"
loadmodule "ims_usrloc_scscf"
loadmodule "ims_registrar_scscf"
loadmodule "ims_auth"
loadmodule "ims_isc"
loadmodule "rtpengine"

modparam("rtpengine", "rtpengine_sock", RTPADR)

loadmodule "xlog"
modparam("xlog", "prefix", "[$ci $rm-$cs] ")
modparam("xlog", "prefix_mode", 1)

import_file "monitor.cfg"

loadmodule "debugger"
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 3) # L_DBG

modparam("cdp", "config_file", "/etc/cscf/diameter.xml")
modparam("ims_dialog", "dlg_flag", FLT_DIALOG)

# Diameter Cx: Multimedia-Auth-Request (MAR)
modparam("ims_auth", "cxdx_dest_realm", EPC_REALM)            # Destination-Realm AVP
modparam("ims_auth", "name", SRVURI)                          # Server-Name AVP

# Diameter Cx: Server-Assignment-Request (SAR)
modparam("ims_registrar_scscf", "cxdx_dest_realm", EPC_REALM) # Destination-Realm AVP
modparam("ims_registrar_scscf", "scscf_name", SRVURI)         # Server-Name AVP
modparam("ims_registrar_scscf", "user_data_xsd", "/etc/cscf/CxData.xsd")

# RFC 3327 process Path header
modparam("ims_registrar_scscf", "use_path", 1)

#!ifdef MOD_ims_charging
# Diameter Ro: Credit-Control-Request (CCR)
modparam("ims_charging", "destination_realm", REALM)          # Destination-Realm AVP 
modparam("ims_charging", "use_pani_from_term_invite", 1)
#modparam("ims_charging", "service_context_id_root", "calls@ims.org")
#modparam("ims_charging", "service_context_id_release", "8")
#modparam("ims_charging", "service_context_id_mcc", "001")
#modparam("ims_charging", "service_context_id_mnc", "01")
#modparam("ims_charging", "interim_update_credits", 30)
#modparam("ims_charging", "timer_buffer", 3)
#!endif

#!ifdef DBURL
#!defexps DB_URL "redis://" + DBURL

loadmodule "db_redis"
modparam("db_redis", "schema_path", "/etc/cscf/schema/serving")

#modparam("db_redis", "keys", "dialog_in=entry:hash_entry,hash_id")
#modparam("db_redis", "keys", "dialog_out=entry:id")
#modparam("db_redis", "keys", "dialog_vars=entry:hash_entry,hash_id")
#modparam("ims_dialog", "db_mode", 1)
#modparam("ims_dialog", "db_url", DB_URL)
#!endif


request_route {
	if("REGISTER" == $rm) {
		route(REGISTER);
		exit;
	}

	if("SUBSCRIBE" == $rm) {
		route(SUBSCRIBE);
		exit;
	}

	# should be before CCR to avoid callback overwrite
	setflag(FLT_DIALOG);
	loose_route();
	record_route();
	lookup("location");
	if(!t_newtran()) {
		send_reply_error();
		exit;
	}

	if("INVITE" == $rm) {
		t_on_reply("INVITE");
		rtpengine_manage();
	}

#!ifdef MOD_ims_charging
	if("INVITE" == $rm) {
		Ro_CCR("CCA", "orig", 30, "0", "0");
	}

	if("BYE" == $rm) {
		Ro_CCR_Stop("orig", "400", "End of charging");
	}
#!endif

	isc_match_filter("orig", "location");

	route(RELAY);
}

route[REGISTER] {
	if(!ims_www_authenticate("$td")) {
		switch ($?) {
		case -1:
			# user has not been authenticated. Send 401 Unauthorized challenge
			route(CHALLENGE);
			break;
		case -9:
			ims_www_resync_auth("CHALLENGE", "$td");
			break;
		default:
			send_reply("400", "Authentication failed ($?)");
			break;
		}
		exit;
	}
	if(impu_registered("location")) {
		xlog("L_DBG", "IMPU is registered\n");
		#isc_match_filter_reg("1", "location");
	}
	save("SAA", "location");
}

route[CHALLENGE] {
	$var(alg) = selval($aa, $aa, "AKAv1-MD5");
	ims_www_challenge("MAA", "$td", "$var(alg)");
}

# Diameter Cx: Multimedia-Auth-Answer (MAA)
route[MAA] {
	xlog("L_INFO", "MAR return code: $avp(s:maa_return_code)\n");
	if(!$avp(s:maa_return_code)) {
		send_reply("500", "MAR failed");
	}
}

# Diameter Cx: Server-Assignment-Answer (SAA)
route[SAA] {
	xlog("L_INFO", "SAR return code: $avp(s:saa_return_code)\n");
	if($avp(s:saa_return_code)) {
		xlog("L_DBG", "SAR Success\n");
		#isc_match_filter_reg("0", "location");
	}
}

route[SUBSCRIBE] {
	# the reason for transaction creation is threefold
	# 1. synchronizes (gives time) for parsing header P-Asserted-Identity XXX
	# 2. subscription reply 200 OK is using t_reply
	# 3. absorbs retransmissions?
	if(!(t_newtran() && can_subscribe_to_reg("location"))) {
		send_reply_error();
		exit;
	}

	subscribe_to_reg("location");
}

# Diameter Ro: Credit-Control-Answer (CCA)
route[CCA] {
	xlog("L_INFO", "CCR return code: $avp(s:cca_return_code)\n");
	if($avp(s:cca_return_code)) {
		route(RELAY);
	}
}

onreply_route[INVITE] {
	if(has_body("application/sdp")) {
		rtpengine_manage();
	}
}

route[RELAY] {
	if(!t_relay()) {
		send_reply_error();
	}
}

