#!KAMAILIO
# Serving Call Session Control Function (S-CSCF)
# Diameter Cx: 3GPP TS 29.229
# Diameter Ro: 3GPP TS 32.299

#!trydefenv RO_IMPI
#!trydefenvs DBURL
#!defenvs RTPADR
#!defenvs REALM
#!defexps SERVER    "scscf.ims." + REALM
#!defexps SRVURI    "sip:" + SERVER
#!defexps EPC_REALM "epc." + REALM
#!define FLT_DIALOG 1
#!define HEALTH cdp_has_app("16777216")

#listen = [::]:5060 advertise SERVER name "Mw"
listen = 0.0.0.0:5060 advertise SERVER name "Mw"
user_agent_header = "User-Agent: Serving-CSCF"
server_header = "Server: Serving-CSCF"
children = 1
debug = 3

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "rr"
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "textops"
loadmodule "siputils"
loadmodule "presence"
loadmodule "ims_dialog"
loadmodule "ims_charging"
loadmodule "ims_usrloc_scscf"
loadmodule "ims_registrar_scscf"
loadmodule "ims_auth"
loadmodule "ims_isc"
loadmodule "rtpengine"

modparam("rtpengine", "rtpengine_sock", RTPADR)

loadmodule "xlog"
modparam("xlog", "prefix", "[$ci $rm-$cs] ")
modparam("xlog", "prefix_mode", 1)

import_file "monitor.cfg"
include_file "common.cfg"

loadmodule "debugger"
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 3) # L_DBG

modparam("cdp", "config_file", "/etc/cscf/diameter.xml")
modparam("ims_dialog", "dlg_flag", FLT_DIALOG)

# Diameter Cx: Multimedia-Auth-Request (MAR)
modparam("ims_auth", "cxdx_dest_realm", EPC_REALM)            # Destination-Realm AVP
modparam("ims_auth", "name", SRVURI)                          # Server-Name AVP

# Diameter Cx: Server-Assignment-Request (SAR)
modparam("ims_registrar_scscf", "cxdx_dest_realm", EPC_REALM) # Destination-Realm AVP
modparam("ims_registrar_scscf", "scscf_name", SRVURI)         # Server-Name AVP
modparam("ims_registrar_scscf", "user_data_xsd", "/etc/cscf/CxData.xsd")

# RFC 3327 process Path header
modparam("ims_registrar_scscf", "use_path", 1)

#!ifdef MOD_ims_charging
# Diameter Ro: Credit-Control-Request (CCR)
modparam("ims_charging", "destination_realm", REALM)          # Destination-Realm AVP 
modparam("ims_charging", "use_pani_from_term_invite", 1)
modparam("ims_charging", "custom_user_avp", "$avp(from_user)")
#modparam("ims_charging", "service_context_id_root", "calls@ims.org")
#modparam("ims_charging", "service_context_id_release", "8")
#modparam("ims_charging", "service_context_id_mcc", "001")
#modparam("ims_charging", "service_context_id_mnc", "01")
#modparam("ims_charging", "interim_update_credits", 30)
#modparam("ims_charging", "timer_buffer", 3)
#!endif

#!ifdef DBURL
#!defexps DB_URL "redis://" + DBURL

loadmodule "db_redis"
modparam("db_redis", "schema_path", "/etc/cscf/schema/serving")

#modparam("db_redis", "keys", "contact=entry:contact")
#modparam("db_redis", "keys", "impu=entry:impu")
##modparam("db_redis", "keys", "impu_contact=entry:id")
#modparam("db_redis", "keys", "subscriber=entry:event,watcher_contact,presentity_uri")
##modparam("db_redis", "keys", "impu_subscriber=entry:id")

# userloc has hardcoded sql for connecting tables impu_contact and impu_subscriber
#loadmodule "db_mysql"
#modparam("ims_usrloc_scscf", "db_mode", 1)
#modparam("ims_usrloc_scscf", "db_url", "mysql://maria/scscf")

#!ifdef MOD_ims_charging
modparam("db_redis", "keys", "ro_session=entry:id")
modparam("ims_charging", "db_mode", 1)
modparam("ims_charging", "db_url", DB_URL)
#!endif

#modparam("db_redis", "keys", "dialog_in=entry:hash_entry,hash_id")
#modparam("db_redis", "keys", "dialog_out=entry:id")
#modparam("db_redis", "keys", "dialog_vars=entry:hash_entry,hash_id")
#modparam("ims_dialog", "db_mode", 1)
#modparam("ims_dialog", "db_url", DB_URL)
#!endif


request_route {
	if("REGISTER" == $rm) {
		route(REGISTER);
		exit;
	}

	if("SUBSCRIBE" == $rm) {
		route(SUBSCRIBE);
		exit;
	}

	reg_fetch_contacts("location", "$fu", "caller");

	# should be before CCR to avoid callback overwrite
	setflag(FLT_DIALOG);
	loose_route();
	record_route();
	lookup("location");
	if(!t_newtran()) {
		send_reply_error();
		exit;
	}

	if("INVITE" == $rm) {
		t_on_reply("INVITE");
		rtpengine_manage();
	}

	route(ORIG);

	reg_free_contacts("caller");

	isc_match_filter("orig", "location");

	route(RELAY);
}

route[REGISTER] {
	if(impu_registered("location") && $expires(max) == "0") {
		save("SAA", "location");
		exit;
	}
	if(!ims_www_authenticate("$td")) {
		switch ($?) {
		case -1:
			# user has not been authenticated. Send 401 Unauthorized challenge
			route(CHALLENGE);
			break;
		case -9:
			ims_www_resync_auth("CHALLENGE", "$td");
			break;
		default:
			send_reply("400", "Authentication failed ($?)");
			break;
		}
		exit;
	}
	save("SAA", "location");
}

route[CHALLENGE] {
	$var(alg) = selval($aa, $aa, "AKAv1-MD5");
	ims_www_challenge("MAA", "$td", "$var(alg)");
}

# Diameter Cx: Multimedia-Auth-Answer (MAA)
route[MAA] {
	xinfo("MAR return code: $avp(s:maa_return_code)\n");
	if(!$avp(s:maa_return_code)) {
		send_reply("500", "MAR failed");
	}
}

# Diameter Cx: Server-Assignment-Answer (SAA)
route[SAA] {
	xinfo("SAR return code: $avp(s:saa_return_code)\n");
	if($avp(s:saa_return_code)) {
		xdbg("SAR Success\n");
		#isc_match_filter_reg("0", "location");
	}
}

route[SUBSCRIBE] {
	# the reason for transaction creation is threefold
	# 1. synchronizes (gives time) for parsing header P-Asserted-Identity XXX
	# 2. subscription reply 200 OK is using t_reply
	# 3. absorbs retransmissions?
	if(!(t_newtran() && (has_totag() || can_subscribe_to_reg("location")))) {
		send_reply_error();
		exit;
	}

	subscribe_to_reg("location");
}

route[ORIG] {
	$var(direction) = "orig";
	route(BILL);
}

route[TERM] {
	$var(direction) = "term";
	route(BILL);
}

route[BILL] {
#!ifdef MOD_ims_charging
	# fail-safe for billing failure
	# calls should be successfully processed even when billing is temporarily unavailable
	if(cdp_has_app("4")) {
		if("INVITE" == $rm) {
#!ifdef RO_IMPI
			$avp(from_user) = $(ulc(caller=>impi){re.subst,/@.*//});
#!endif
			Ro_CCR("CCA", $var(direction), 30, "0", "0");
		}

		if("BYE" == $rm) {
			Ro_CCR_Stop($var(direction), "400", "End of charging");
		}
	} else {
		xwarn("Ro/Rf disconnected!\n");
	}
#!else
	xwarn("Ro/Rf disabled!\n");
#!endif
}

# Diameter Ro: Credit-Control-Answer (CCA)
route[CCA] {
	xinfo("CCR return code: $avp(s:cca_return_code)\n");
	if($avp(s:cca_return_code)) {
		route(RELAY);
	}
}

onreply_route[INVITE] {
	if(has_body("application/sdp")) {
		rtpengine_manage();
	}
}

route[RELAY] {
	if(!t_relay()) {
		send_reply_error();
	}
}

