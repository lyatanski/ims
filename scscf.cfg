#!KAMAILIO

# Serving Call Session Control Function (S-CSCF)

children=1
debug=3

#!defenvs EPC_REALM
#!define FLT_DIALOG 1

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "rr"
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "presence"
loadmodule "ims_dialog"
loadmodule "ims_usrloc_scscf"
loadmodule "ims_registrar_scscf"
loadmodule "ims_auth"
loadmodule "xlog"
#loadmodule "ims_isc"
loadmodule "debugger"

modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 3) # L_DBG

modparam("cdp", "config_file", "/etc/ims/diameter.xml")
modparam("ims_dialog", "dlg_flag", FLT_DIALOG)
modparam("ims_auth", "cxdx_dest_realm", EPC_REALM)
modparam("ims_registrar_scscf", "cxdx_dest_realm", EPC_REALM)

request_route {
	if("REGISTER" == $rm) {
		route(REGISTER);
	}

	sl_reply("501", "Not Implemented");
}

route[REGISTER] {
	if(!ims_www_authenticate("$td")) {
		switch ($?) {
		case -2:
			send_reply("403", "Authentication Failed");
			break;
		case -3:
			send_reply("400", "Bad Request");
			break;
		case -9:
			ims_www_resync_auth("CHALLENGE", "$td");
			break;
		default:
			# user has not been authenticated. Send 401 Unauthorized challenge
			route(CHALLENGE);
			break;
		}
		exit;
	}
	if(impu_registered("location")) {
		xlog("L_DBG", "IMPU is registered\n");
		#isc_match_filter_reg("1", "location");
	}
	save("SAA", "location");
	exit;
}

route[CHALLENGE] {
	if(!$aa) {
		$var(alg) = "AKAv1-MD5";
	} else {
		$var(alg) = $aa;
	}
	ims_www_challenge("MAA", "$td", "$var(alg)");
	exit;
}

# Diameter: Multimedia Authentication Answer
#     retrieve subscriber authentication vectors from HSS
route[MAA] {
	xlog("L_INFO", "MAR return code: $avp(s:maa_return_code)\n");
	if($avp(s:maa_return_code) != 1) {
		send_reply("500", "MAR failed");
	}
	exit;
}

# Diameter: Server Assignment Answer
#   inform HSS the URI of the SCSCF and pull the subscriber profile information
route[SAA] {
	xlog("L_INFO", "SAR return code: $avp(s:saa_return_code)\n");
	if($avp(s:saa_return_code) == 1) {
		xlog("L_DBG", "SAR Success\n");
		#isc_match_filter_reg("0", "location");
	}
	exit;
}

