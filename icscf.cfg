#!KAMAILIO

# Interrogating Call Session Control Function (I-CSCF)

children=1
debug=3

#!defenvs REALM
#!defexps EPC_REALM "epc." + REALM
#!defexps SRV_NAME "icscf.ims." + REALM

listen=0.0.0.0:5060 advertise SRV_NAME name "Mw"

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "db_mysql"
loadmodule "ims_icscf"
loadmodule "textops"
loadmodule "xlog"
loadmodule "debugger"

import_file "monitor.cfg"

modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 3) # L_DBG

modparam("cdp", "config_file", "/etc/ims/diameter.xml")
modparam("ims_icscf", "db_url", "mysql://maria/icscf")

# destination realm needs to be set explicitly
# otherwise empty and diameter messages are not sent
modparam("ims_icscf", "cxdx_dest_realm", EPC_REALM)

request_route {
	if(is_method("REGISTER")) route(REGISTER);

	if(is_method("INVITE|SUBSCRIBE|MESSAGE|INFO|PUBLISH|CANCEL")) {
		I_perform_location_information_request("LIA", "0");
	} else {
		xlog("L_ERR", "Misconfiguration! Method '$rm' not allowed at the I-CSCF\n");
		append_to_reply("Allow: INVITE,SUBSCRIBE,MESSAGE,INFO,PUBLISH,CANCEL\r\n");
		send_reply("406","Initial Request Method not allowed at the I-CSCF");
	}
}

route[REGISTER] {
	if(I_scscf_select("0")) {
		# S-CSCF list exist, no need to do a UAR
		route(RELAY);
	} else {
		# no S-CSCF list therefore must do UAR
		# free this from the failed I_scscf_select call
		I_scscf_drop();

		# Asynchronous UAR
		# 0=do not request capabilities; 1=request capabilities
		if(!I_perform_user_authorization_request("UAA", "0")) {
			send_reply("500", "Error in Request");
		}
	}
	exit;
}

# Diameter: User Authorization Answer
#     user authorization and S-CSCF URI discovery
route[UAA] {
	xlog("L_INFO", "UAR return code: $avp(s:uaa_return_code)\n");
	if($avp(s:uaa_return_code) != 1) {
		send_reply("500", "UAR failed");
		exit;
	}

	route(SELECT);
}

# Diameter: Location Info Answer
#     request routing information - S-CSCF URI
route[LIA] {
	xlog("L_INFO", "LIR return code: $avp(lia_return_code)\n");
	if($avp(lia_return_code) != 1) {
		send_reply("500", "LIR failed");
		exit;
	}

	route(SELECT);
}

route[SELECT] {
	if(!I_scscf_select("0")) {
		# select failed
		I_scscf_drop();
		t_reply("500", "Server error on SCSCF Select (UAR)");
		exit;
	}

	route(RELAY);
}

route[RELAY] {
	t_on_reply("RESP");
	t_on_failure("FAIL");

	# now relay to appropriate SCSCF
	if(!t_relay()) {
		t_reply("500", "Error forwarding to SCSCF");
	}
}

onreply_route[RESP] {
	xlog("L_INFO", "RESP\n");
}

failure_route[FAIL] {
	xlog("L_INFO", "FAIL\n");
}

