#!KAMAILIO

# Interrogating Call Session Control Function (I-CSCF)

children=1
debug=3

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "cdp"
loadmodule "cdp_avp"
loadmodule "ims_icscf"
loadmodule "xlog"

modparam("cdp", "config_file", "/etc/ims/diameter.xml")

request_route {
	if("REGISTER" == $rm) route(REGISTER);

	#I_perform_location_information_request("LIA");

	sl_reply("501", "Not Implemented");
}

route[REGISTER] {
	if(I_scscf_select("0")) {
		# S-CSCF list exist, no need to do a UAR
		route(RELAY);
	} else {
		# no S-CSCF list therefore must do UAR
		# free this from the failed I_scscf_select call
		I_scscf_drop();

		# Asynchronous UAR
		# 0=do not request capabilities; 1=request capabilities
		if(!I_perform_user_authorization_request("UAA","0")) {
			send_reply("500", "Error in Request");
		}
	}
	exit;
}

# Diameter: User Authorization Answer
#     user authorization and S-CSCF URI discovery
route[UAA] {
	xlog("L_INFO", "UAR return code: $avp(s:uaa_return_code)\n");
	if($avp(s:maa_return_code) != 1) {
		send_reply("500", "UAR failed");
		exit;
	}

	if(!I_scscf_select("0")) {
		# select failed
		I_scscf_drop();
		t_reply("500", "Server error on SCSCF Select (UAR)");
		exit;
	}

	route(RELAY);
}

# Diameter: Location Info Answer
#     request routing information - S-CSCF URI
route[LIA] {
	xlog("L_INFO", "LIR return code: $avp(lia_return_code)\n");
	if ($avp(lia_return_code) != 1) {
		send_reply("500", "LIR failed");
		exit;
	}
}

route[RELAY] {
	#t_on_reply("RELAY_RES");
	#t_on_failure("RELAY_ERR");

	# now relay to appropriate SCSCF
	if(!t_relay()) {
		t_reply("500", "Error forwarding to SCSCF");
	}
}

#route[RELAY_RES] {
#}
#
#route[RELAY_ERR] {
#}

