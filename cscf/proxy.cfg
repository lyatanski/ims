#!KAMAILIO
# Proxy Call Session Control Function (P-CSCF)
# Diameter Rx: 3GPP TS 29.214

#!defenvs REALM
#!defenvs IPSEC
#!defexps SERVER "pcscf.ims." + REALM

listen=0.0.0.0:5060 advertise SERVER name "Mw"
user_agent_header="User-Agent: Proxy-CSCF"
server_header="Server: Proxy-CSCF"
children=1
debug=3
tcp_reuse_port=yes

loadmodule "tm"
loadmodule "pv"
loadmodule "sl"
loadmodule "rr"
loadmodule "textops"
loadmodule "ims_usrloc_pcscf"
loadmodule "ims_ipsec_pcscf"
#loadmodule "pua" # for reginfo
loadmodule "ims_registrar_pcscf"
loadmodule "xlog"
loadmodule "debugger"

import_file "monitor.cfg"

modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 3) # L_DBG

modparam("ims_ipsec_pcscf", "ipsec_listen_addr", IPSEC)

request_route {
	loose_route();
	xlog("L_INFO", "---------------------------- route_uri:$route_uri\n");
	if("REGISTER" == $rm) {
		route(REGISTER);
	} else if($route_uri =~ "sip:orig@.*") {
		xlog("L_INFO", "---------- $rm ORIG\n");
		if (!pcscf_is_registered("location")) {
			send_reply("403","Forbidden - You must register first with a S-CSCF");
			exit;
		}

		# RFC 3325
		remove_hf("P-Asserted-Identity");
		remove_hf("P-Preferred-Identity");
		if (is_present_hf("P-Preferred-Identity") && pcscf_assert_identity("location", "$hdr(P-Preferred-Identity)")) {
			append_hf("P-Asserted-Identity: $hdr(P-Preferred-Identity)\r\n");
		} else if (is_present_hf("P-Asserted-Identity") && pcscf_assert_identity("location", "$hdr(P-Asserted-Identity)")) {
			append_hf("P-Asserted-Identity: $hdr(P-Asserted-Identity)\r\n");
		} else {
			append_hf("P-Asserted-Identity: <$pcscf_asserted_identity>\r\n");
		}
	} else {
		xlog("L_INFO", "---------- $rm TERM\n");
		ipsec_forward("location");
		$du = $ru;
	}
	append_hf("P-Visited-Network-ID: ims."+REALM+"\r\n");

	# help requests comming from S-CSCF find their way
	record_route();
	t_relay();
}

route[REGISTER] {
	# Strip Transport from RURI:
	$ru = $(ru{re.subst,/;transport=[A-Za-z]*//g});

	if(is_present_hf("Contact")) {
		pcscf_save_pending("location");
	} else {
		send_reply("403", "No contact header");
		exit;
	}

	# RFC 3327
	# necessary for the S-CSCF to be able to route requests
	append_hf("Path: <sip:term@"+SERVER+";lr>\r\n");
	remove_hf("Supported");
	append_hf("Supported: path\r\n");
	remove_hf("Require");
	append_hf("Require: path\r\n");

	t_on_reply("RESP");
	t_on_failure("FAIL");
}

onreply_route[RESP] {
	if(t_check_status("200")) {
		pcscf_save("location");
	}

	# TS 24.229 5.2.2.2
	# When the P-CSCF receives a 401 (Unauthorized) response to a REGISTER request,
	# the P-CSCF shall remove the "ck" and "ik" WWW-Authenticate header field
	if(t_check_status("401")) {
		ipsec_create("location");
		if (is_present_hf("WWW-Authenticate")) {
			remove_hf("WWW-Authenticate");
			append_hf("WWW-Authenticate: $(hdr(WWW-Authenticate){re.subst,/(ck|ik)+=\"(.+?)\",//gi})\r\n");
		}
	}
}

failure_route[FAIL] {
	xlog("L_INFO", "FAIL\n");
}
